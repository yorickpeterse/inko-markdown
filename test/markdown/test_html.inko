import markdown (Document)
import markdown (Node)
import markdown.html (
  Filter, Generator, HeadingTree, TableOfContents, percent_encode,
)
import markdown.parser (Parser)
import std.test (Tests)

fn gen(input: String) -> String {
  let doc = match Parser.new(input).parse {
    case Ok(doc) -> doc
    case Error(err) -> panic('failed to parse `${input}`: ${err}')
  }

  Generator.new(doc).generate.to_string
}

fn parse(input: String) -> Document {
  Document.parse(input).get
}

fn filter[T: mut + Filter](input: String, filter: T) -> String {
  let doc = parse(input).to_html

  filter.run(doc)
  doc.to_pretty_string.trim
}

fn pub tests(t: mut Tests) {
  t.test('Percent encoding individual bytes', fn (t) {
    let exp = [
      '%00',
      '%01',
      '%02',
      '%03',
      '%04',
      '%05',
      '%06',
      '%07',
      '%08',
      '%09',
      '%0A',
      '%0B',
      '%0C',
      '%0D',
      '%0E',
      '%0F',
      '%10',
      '%11',
      '%12',
      '%13',
      '%14',
      '%15',
      '%16',
      '%17',
      '%18',
      '%19',
      '%1A',
      '%1B',
      '%1C',
      '%1D',
      '%1E',
      '%1F',
      '%20',
      '%21',
      '%22',
      '%23',
      '%24',
      '%25',
      '%26',
      '%27',
      '%28',
      '%29',
      '%2A',
      '%2B',
      '%2C',
      '%2D',
      '%2E',
      '%2F',
      '%30',
      '%31',
      '%32',
      '%33',
      '%34',
      '%35',
      '%36',
      '%37',
      '%38',
      '%39',
      '%3A',
      '%3B',
      '%3C',
      '%3D',
      '%3E',
      '%3F',
      '%40',
      '%41',
      '%42',
      '%43',
      '%44',
      '%45',
      '%46',
      '%47',
      '%48',
      '%49',
      '%4A',
      '%4B',
      '%4C',
      '%4D',
      '%4E',
      '%4F',
      '%50',
      '%51',
      '%52',
      '%53',
      '%54',
      '%55',
      '%56',
      '%57',
      '%58',
      '%59',
      '%5A',
      '%5B',
      '%5C',
      '%5D',
      '%5E',
      '%5F',
      '%60',
      '%61',
      '%62',
      '%63',
      '%64',
      '%65',
      '%66',
      '%67',
      '%68',
      '%69',
      '%6A',
      '%6B',
      '%6C',
      '%6D',
      '%6E',
      '%6F',
      '%70',
      '%71',
      '%72',
      '%73',
      '%74',
      '%75',
      '%76',
      '%77',
      '%78',
      '%79',
      '%7A',
      '%7B',
      '%7C',
      '%7D',
      '%7E',
      '%7F',
      '%80',
      '%81',
      '%82',
      '%83',
      '%84',
      '%85',
      '%86',
      '%87',
      '%88',
      '%89',
      '%8A',
      '%8B',
      '%8C',
      '%8D',
      '%8E',
      '%8F',
      '%90',
      '%91',
      '%92',
      '%93',
      '%94',
      '%95',
      '%96',
      '%97',
      '%98',
      '%99',
      '%9A',
      '%9B',
      '%9C',
      '%9D',
      '%9E',
      '%9F',
      '%A0',
      '%A1',
      '%A2',
      '%A3',
      '%A4',
      '%A5',
      '%A6',
      '%A7',
      '%A8',
      '%A9',
      '%AA',
      '%AB',
      '%AC',
      '%AD',
      '%AE',
      '%AF',
      '%B0',
      '%B1',
      '%B2',
      '%B3',
      '%B4',
      '%B5',
      '%B6',
      '%B7',
      '%B8',
      '%B9',
      '%BA',
      '%BB',
      '%BC',
      '%BD',
      '%BE',
      '%BF',
      '%C0',
      '%C1',
      '%C2',
      '%C3',
      '%C4',
      '%C5',
      '%C6',
      '%C7',
      '%C8',
      '%C9',
      '%CA',
      '%CB',
      '%CC',
      '%CD',
      '%CE',
      '%CF',
      '%D0',
      '%D1',
      '%D2',
      '%D3',
      '%D4',
      '%D5',
      '%D6',
      '%D7',
      '%D8',
      '%D9',
      '%DA',
      '%DB',
      '%DC',
      '%DD',
      '%DE',
      '%DF',
      '%E0',
      '%E1',
      '%E2',
      '%E3',
      '%E4',
      '%E5',
      '%E6',
      '%E7',
      '%E8',
      '%E9',
      '%EA',
      '%EB',
      '%EC',
      '%ED',
      '%EE',
      '%EF',
      '%F0',
      '%F1',
      '%F2',
      '%F3',
      '%F4',
      '%F5',
      '%F6',
      '%F7',
      '%F8',
      '%F9',
      '%FA',
      '%FB',
      '%FC',
      '%FD',
      '%FE',
      '%FF',
    ]

    0.to(255).iter.each(fn (b) {
      let buf = ByteArray.new

      percent_encode(b, into: buf)
      t.equal(buf.into_string, exp.get(b))
    })
  })

  t.test('HeadingTree.add', fn (t) {
    let tree = HeadingTree(roots: [], current: Option.None)

    tree.add(level: 1, id: 'a', text: 'A')
    tree.add(level: 2, id: 'b', text: 'B')
    tree.add(level: 3, id: 'c', text: 'C')
    tree.add(level: 2, id: 'd', text: 'D')
    tree.add(level: 3, id: 'e', text: 'E')

    let root = tree.roots.get(0)

    t.equal(root.id, 'a')
    t.equal(tree.current.as_ref.map(fn (v) { v.id }), Option.Some('e'))
    t.equal(root.nodes.size, 2)
    t.equal(root.nodes.opt(0).map(fn (v) { v.id }), Option.Some('b'))
    t.equal(
      root.nodes.opt(0).then(fn (v) { v.nodes.opt(0) }).map(fn (v) { v.id }),
      Option.Some('c'),
    )
    t.equal(root.nodes.opt(1).map(fn (v) { v.id }), Option.Some('d'))
    t.equal(
      root.nodes.opt(1).then(fn (v) { v.nodes.opt(0) }).map(fn (v) { v.id }),
      Option.Some('e'),
    )
  })

  t.test('Generator.generate with regular text', fn (t) {
    t.equal(gen('abc'), '<p>abc</p>')
  })

  t.test('Generator.generate with emphasis text', fn (t) {
    t.equal(gen('_abc_'), '<p><em>abc</em></p>')
  })

  t.test('Generator.generate with strong text', fn (t) {
    t.equal(gen('**abc**'), '<p><strong>abc</strong></p>')
  })

  t.test('Generator.generate with code spans', fn (t) {
    t.equal(gen('`abc`'), '<p><code>abc</code></p>')
    t.equal(gen('`<>`'), '<p><code>&lt;&gt;</code></p>')
  })

  t.test('Generator.generate with code blocks', fn (t) {
    t.equal(gen('```\nfoo\n```'), '<pre><code>foo\n</code></pre>')
    t.equal(
      gen('```html\nfoo\n```'),
      '<pre><code data-language="html">foo\n</code></pre>',
    )
  })

  t.test('Generator.generate with links', fn (t) {
    t.equal(gen('<foo>'), '<p><a href="foo">foo</a></p>')
    t.equal(gen('[**a**](b)'), '<p><a href="b"><strong>a</strong></a></p>')
    t.equal(gen('[](b)'), '<p><a href="b"></a></p>')
    t.equal(gen('[**a**][b]'), '<p><a><strong>a</strong></a></p>')
    t.equal(gen('[][b]'), '<p><a></a></p>')
    t.equal(
      gen('[**a**][b]\n[b]: foo'),
      '<p><a href="foo"><strong>a</strong></a></p>',
    )
  })

  t.test('Generator.generate with images', fn (t) {
    t.equal(gen('![a](b)'), '<p><img src="b" alt="a" /></p>')
    t.equal(gen('![a][b]'), '<p><img alt="a" /></p>')
    t.equal(gen('![a][b]\n[b]: b'), '<p><img src="b" alt="a" /></p>')
  })

  t.test('Generator.generate with footnotes', fn (t) {
    t.equal(gen('[^a]'), '<p></p>')
    t.equal(
      gen('[^a]\n[^a]: foo'),
      '
<p><a href="#footnote-1" class="footnote"><sup>1</sup></a></p>
<div class="footnotes">
<ol><li id="footnote-1">foo</li></ol>
</div>
      '
        .trim
        .replace('\n', ''),
    )
  })

  t.test('Generator.generate with disabling footnotes', fn (t) {
    let doc = Parser.new('[^a]\n[^a]: foo').parse.get
    let gen = Generator.new(doc)

    gen.enable_footnotes = false
    t.equal(gen.generate.to_string, '<p></p>')
  })

  t.test('Generator.generate with lists', fn (t) {
    t.equal(gen('- **a**'), '<ul><li><strong>a</strong></li></ul>')
    t.equal(gen('1. **a**'), '<ol><li><strong>a</strong></li></ol>')
  })

  t.test('Generator.generate with blockquotes', fn (t) {
    t.equal(gen('>>>\na\n>>>'), '<blockquote><p>a</p></blockquote>')
  })

  t.test('Generator.generate with headings', fn (t) {
    t.equal(gen('# a'), '<h1>a</h1>')
    t.equal(gen('## a'), '<h2>a</h2>')
    t.equal(gen('### a'), '<h3>a</h3>')
    t.equal(gen('#### a'), '<h4>a</h4>')
    t.equal(gen('##### a'), '<h5>a</h5>')
    t.equal(gen('###### a'), '<h6>a</h6>')
  })

  t.test('Generator.generate with superscripts and subscripts', fn (t) {
    t.equal(gen('^a^'), '<p><sup>a</sup></p>')
    t.equal(gen('~a~'), '<p><sub>a</sub></p>')
  })

  t.test('Generator.generate with custom blocks', fn (t) {
    t.equal(gen(':::\nfoo\n:::'), '<div><p>foo</p></div>')
    t.equal(gen('::: abc\nfoo\n:::'), '<div class="abc"><p>foo</p></div>')
  })

  t.test('Generator.generate with custom spans', fn (t) {
    t.equal(gen('[foo]{}'), '<p><span>foo</span></p>')
    t.equal(gen('[foo]{abc}'), '<p><span class="abc">foo</span></p>')
  })

  t.test('Generator.generate with thematic breaks', fn (t) {
    t.equal(gen('---'), '<hr />')
  })

  t.test('Generator.generate with hard line breaks', fn (t) {
    t.equal(gen('a\\\nb'), '<p>a<br />b</p>')
  })

  t.test('Generator.generate with tables', fn (t) {
    t.equal(
      gen(
        '
|-
| tb 1
| tb 2
        ',
      ),
      '<table><tbody><tr><td>tb 1</td><td>tb 2</td></tr></tbody></table>',
    )

    t.equal(
      gen(
        '
|=
| th 1
| th 2
        ',
      ),
      '<table><thead><tr><th>th 1</th><th>th 2</th></tr></thead></table>',
    )

    t.equal(
      gen(
        '
|=
| th 1
| th 2
|-
| tb 1
| tb 2
        ',
      ),
      '
<table>
<thead><tr><th>th 1</th><th>th 2</th></tr></thead>
<tbody><tr><td>tb 1</td><td>tb 2</td></tr></tbody>
</table>
      '
        .trim
        .replace('\n', ''),
    )

    t.equal(
      gen(
        '
|=
| th 1
| th 2
|-
| tb 1
| tb 2
|+
| tf 1
| tf 2
        ',
      ),
      '
<table>
<thead><tr><th>th 1</th><th>th 2</th></tr></thead>
<tbody><tr><td>tb 1</td><td>tb 2</td></tr></tbody>
<tfoot><tr><td>tf 1</td><td>tf 2</td></tr></tfoot>
</table>
      '
        .trim
        .replace('\n', ''),
    )
  })

  t.test('Generator.generate with comments', fn (t) {
    t.equal(gen('<!-- a -->'), '')
  })

  t.test('TableOfContents.run adds IDs to headers', fn (t) {
    t.equal(filter('# Foo', TableOfContents.new), '<h1 id="foo">Foo</h1>')
    t.equal(filter('## Foo', TableOfContents.new), '<h2 id="foo">Foo</h2>')
    t.equal(filter('### Foo', TableOfContents.new), '<h3 id="foo">Foo</h3>')
    t.equal(filter('#### Foo', TableOfContents.new), '<h4 id="foo">Foo</h4>')
    t.equal(filter('##### Foo', TableOfContents.new), '<h5 id="foo">Foo</h5>')
    t.equal(filter('###### Foo', TableOfContents.new), '<h6 id="foo">Foo</h6>')
    t.equal(
      filter('# Foo\nbar', TableOfContents.new),
      '<h1 id="foo-bar">Foo\nbar</h1>',
    )

    t.equal(
      filter('# Foo # bar', TableOfContents.new),
      '<h1 id="foo-%23-bar">Foo # bar</h1>',
    )

    t.equal(
      filter('# Foo **bar _baz_**', TableOfContents.new),
      '<h1 id="foo-bar-baz">Foo <strong>bar <em>baz</em></strong></h1>',
    )

    t.equal(
      filter('# Foo 🫠 bar', TableOfContents.new),
      '<h1 id="foo-🫠-bar">Foo 🫠 bar</h1>',
    )

    t.equal(
      filter('# foo\n\r\t bar', TableOfContents.new),
      '<h1 id="foo-bar">foo\nbar</h1>',
    )

    t.equal(
      filter('# foo\n# foo\n# foo', TableOfContents.new),
      '
<h1 id="foo">foo</h1>
<h1 id="foo-1">foo</h1>
<h1 id="foo-2">foo</h1>
      '
        .trim,
    )

    t.equal(filter('# A 1.2', TableOfContents.new), '<h1 id="a-1.2">A 1.2</h1>')
    t.equal(filter('# A 1,2', TableOfContents.new), '<h1 id="a-1,2">A 1,2</h1>')
  })

  t.test('TableOfContents.run with a marker and without headers', fn (t) {
    t.equal(filter('::: toc\n:::', TableOfContents.new), '')
  })

  t.test('TableOfContents.run replaces the marker with a table', fn (t) {
    t.equal(
      filter(
        '
# [This should be ignored]{toc-ignore}

::: toc
:::

# Installation
## Linux
### Alpine
#### Examples A
### Ubuntu
#### Examples B
## Windows
# Manually
        ',
        TableOfContents.new,
      ),
      '
<h1 id="this-should-be-ignored">This should be ignored</h1>
<ul class="toc">
  <li>
    <a href="#installation">Installation</a>
    <ul>
      <li>
        <a href="#linux">Linux</a>
        <ul>
          <li>
            <a href="#alpine">Alpine</a>
            <ul>
              <li><a href="#examples-a">Examples A</a></li>
            </ul>
          </li>
          <li>
            <a href="#ubuntu">Ubuntu</a>
            <ul>
              <li><a href="#examples-b">Examples B</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#windows">Windows</a></li>
    </ul>
  </li>
  <li><a href="#manually">Manually</a></li>
</ul>
<h1 id="installation">Installation</h1>
<h2 id="linux">Linux</h2>
<h3 id="alpine">Alpine</h3>
<h4 id="examples-a">Examples A</h4>
<h3 id="ubuntu">Ubuntu</h3>
<h4 id="examples-b">Examples B</h4>
<h2 id="windows">Windows</h2>
<h1 id="manually">Manually</h1>
      '
        .trim,
    )
  })

  t.test('TableOfContents.run with a h2 as the root header', fn (t) {
    t.equal(
      filter(
        '
::: toc
:::

## Foo
### Bar
# Baz
        ',
        TableOfContents.new,
      ),
      '
<ul class="toc">
  <li>
    <a href="#foo">Foo</a>
    <ul>
      <li><a href="#bar">Bar</a></li>
    </ul>
  </li>
  <li><a href="#baz">Baz</a></li>
</ul>
<h2 id="foo">Foo</h2>
<h3 id="bar">Bar</h3>
<h1 id="baz">Baz</h1>
      '
        .trim,
    )
  })

  t.test('TableOfContents.run with a custom maximum depth', fn (t) {
    let toc = TableOfContents.new

    toc.maximum = 2

    t.equal(
      filter(
        '
::: toc
:::

## Foo
### Bar
# Baz
        ',
        toc,
      ),
      '
<ul class="toc">
  <li><a href="#foo">Foo</a></li>
  <li><a href="#baz">Baz</a></li>
</ul>
<h2 id="foo">Foo</h2>
<h3 id="bar">Bar</h3>
<h1 id="baz">Baz</h1>
      '
        .trim,
    )
  })

  t.test('TableOfContents.run with a custom class', fn (t) {
    let toc = TableOfContents.new

    toc.class = 'foo'

    t.equal(
      filter(
        '
::: toc
:::

## Foo
        ',
        toc,
      ),
      '
<ul class="foo">
  <li><a href="#foo">Foo</a></li>
</ul>
<h2 id="foo">Foo</h2>
      '
        .trim,
    )
  })

  t.test('TableOfContents.run with special symbols', fn (t) {
    t.equal(
      filter(
        '
::: toc
:::

# std.int.Int.\\>\\>\\>
# Foo + bar
# hello\'world
# a % b
        ',
        TableOfContents.new,
      ),
      '
<ul class="toc">
  <li><a href="#std.int.int.%3E%3E%3E">std.int.Int.&gt;&gt;&gt;</a></li>
  <li><a href="#foo-+-bar">Foo + bar</a></li>
  <li><a href="#hello\'world">hello\'world</a></li>
  <li><a href="#a-%25-b">a % b</a></li>
</ul>
<h1 id="std.int.int.%3E%3E%3E">std.int.Int.&gt;&gt;&gt;</h1>
<h1 id="foo-+-bar">Foo + bar</h1>
<h1 id="hello\'world">hello\'world</h1>
<h1 id="a-%25-b">a % b</h1>
      '
        .trim,
    )
  })
}
