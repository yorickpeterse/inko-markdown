import markdown.Document
import markdown.html.(Filter, Generator, TableOfContents)
import markdown.parser.Node
import markdown.parser.Parser
import std.test.Tests

fn gen(input: String) -> String {
  let doc = match Parser.new(input).parse {
    case Ok(doc) -> doc
    case Error(err) -> panic("failed to parse `{input}`: {err}")
  }

  Generator.new(doc).generate.to_string
}

fn parse(input: String) -> Document {
  Document.parse(input).unwrap
}

fn filter(input: String, filter: Filter) -> String {
  let doc = parse(input).to_html

  filter.run(doc)
  doc.to_pretty_string.trim
}

fn pub tests(t: mut Tests) {
  t.test('Generator.generate with regular text') fn (t) {
    t.equal(gen('abc'), '<p>abc</p>')
  }

  t.test('Generator.generate with emphasis text') fn (t) {
    t.equal(gen('_abc_'), '<p><em>abc</em></p>')
  }

  t.test('Generator.generate with strong text') fn (t) {
    t.equal(gen('**abc**'), '<p><strong>abc</strong></p>')
  }

  t.test('Generator.generate with code spans') fn (t) {
    t.equal(gen('`abc`'), '<p><code>abc</code></p>')
    t.equal(gen('`<>`'), '<p><code>&lt;&gt;</code></p>')
  }

  t.test('Generator.generate with code blocks') fn (t) {
    t.equal(gen("```\nfoo\n```"), "<pre><code>foo\n</code></pre>")
    t.equal(
      gen("```html\nfoo\n```"),
      "<pre><code data-language=\"html\">foo\n</code></pre>"
    )
  }

  t.test('Generator.generate with links') fn (t) {
    t.equal(gen('<foo>'), '<p><a href="foo">foo</a></p>')
    t.equal(gen('[**a**](b)'), '<p><a href="b"><strong>a</strong></a></p>')
    t.equal(gen('[**a**][b]'), '<p><a><strong>a</strong></a></p>')
    t.equal(
      gen("[**a**][b]\n[b]: foo"), '<p><a href="foo"><strong>a</strong></a></p>'
    )
  }

  t.test('Generator.generate with images') fn (t) {
    t.equal(gen('![a](b)'), '<p><img src="b" alt="a" /></p>')
    t.equal(gen('![a][b]'), '<p><img alt="a" /></p>')
    t.equal(gen("![a][b]\n[b]: b"), '<p><img src="b" alt="a" /></p>')
  }

  t.test('Generator.generate with footnotes') fn (t) {
    t.equal(gen('[^a]'), '<p></p>')
    t.equal(
      gen("[^a]\n[^a]: foo"),
      '\
<p><a href="#footnote-1" class="footnote"><sup>1</sup></a></p>\
<div class="footnotes">\
  <ol><li id="footnote-1">foo</li></ol>\
</div>\
'
    )
  }

  t.test('Generator.generate with disabling footnotes') fn (t) {
    let doc = Parser.new("[^a]\n[^a]: foo").parse.unwrap
    let gen = Generator.new(doc)

    gen.enable_footnotes = false
    t.equal(gen.generate.to_string, '<p></p>')
  }

  t.test('Generator.generate with lists') fn (t) {
    t.equal(gen('- **a**'), '<ul><li><strong>a</strong></li></ul>')
    t.equal(gen('1. **a**'), '<ol><li><strong>a</strong></li></ol>')
  }

  t.test('Generator.generate with blockquotes') fn (t) {
    t.equal(gen(">>>\na\n>>>"), '<blockquote><p>a</p></blockquote>')
  }

  t.test('Generator.generate with headings') fn (t) {
    t.equal(gen('# a'), '<h1>a</h1>')
    t.equal(gen('## a'), '<h2>a</h2>')
    t.equal(gen('### a'), '<h3>a</h3>')
    t.equal(gen('#### a'), '<h4>a</h4>')
    t.equal(gen('##### a'), '<h5>a</h5>')
    t.equal(gen('###### a'), '<h6>a</h6>')
  }

  t.test('Generator.generate with superscripts and subscripts') fn (t) {
    t.equal(gen('^a^'), '<p><sup>a</sup></p>')
    t.equal(gen('~a~'), '<p><sub>a</sub></p>')
  }

  t.test('Generator.generate with custom blocks') fn (t) {
    t.equal(gen(":::\nfoo\n:::"), '<div><p>foo</p></div>')
    t.equal(gen("::: abc\nfoo\n:::"), '<div class="abc"><p>foo</p></div>')
  }

  t.test('Generator.generate with custom spans') fn (t) {
    t.equal(gen('[foo]{}'), '<p><span>foo</span></p>')
    t.equal(gen('[foo]{abc}'), '<p><span class="abc">foo</span></p>')
  }

  t.test('Generator.generate with thematic breaks') fn (t) {
    t.equal(gen('---'), '<hr />')
  }

  t.test('Generator.generate with hard line breaks') fn (t) {
    t.equal(gen("a\\\nb"), '<p>a<br />b</p>')
  }

  t.test('Generator.generate with tables') fn (t) {
    t.equal(
      gen(
        '
|-
| tb 1
| tb 2
        '
      ),
      '<table><tbody><tr><td>tb 1</td><td>tb 2</td></tr></tbody></table>'
    )

    t.equal(
      gen(
        '
|=
| th 1
| th 2
        '
      ),
      '<table><thead><tr><th>th 1</th><th>th 2</th></tr></thead></table>'
    )

    t.equal(
      gen(
        '
|=
| th 1
| th 2
|-
| tb 1
| tb 2
        '
      ),
      '\
<table>\
  <thead><tr><th>th 1</th><th>th 2</th></tr></thead>\
  <tbody><tr><td>tb 1</td><td>tb 2</td></tr></tbody>\
</table>\
      '
    )

    t.equal(
      gen(
        '
|=
| th 1
| th 2
|-
| tb 1
| tb 2
|+
| tf 1
| tf 2
        '
      ),
      '\
<table>\
  <thead><tr><th>th 1</th><th>th 2</th></tr></thead>\
  <tbody><tr><td>tb 1</td><td>tb 2</td></tr></tbody>\
  <tfoot><tr><td>tf 1</td><td>tf 2</td></tr></tfoot>\
</table>\
      '
    )
  }

  t.test('TableOfContents.run adds IDs to headers') fn (t) {
    t.equal(filter('# Foo', TableOfContents.new), '<h1 id="foo">Foo</h1>')
    t.equal(filter('## Foo', TableOfContents.new), '<h2 id="foo">Foo</h2>')
    t.equal(filter('### Foo', TableOfContents.new), '<h3 id="foo">Foo</h3>')
    t.equal(filter('#### Foo', TableOfContents.new), '<h4 id="foo">Foo</h4>')
    t.equal(filter('##### Foo', TableOfContents.new), '<h5 id="foo">Foo</h5>')
    t.equal(filter('###### Foo', TableOfContents.new), '<h6 id="foo">Foo</h6>')
    t.equal(
      filter("# Foo\nbar", TableOfContents.new),
      "<h1 id=\"foo-bar\">Foo\nbar</h1>"
    )

    t.equal(
      filter('# Foo # bar', TableOfContents.new),
      '<h1 id="foo-bar">Foo # bar</h1>'
    )

    t.equal(
      filter('# Foo **bar _baz_**', TableOfContents.new),
      '<h1 id="foo-bar-baz">Foo <strong>bar <em>baz</em></strong></h1>'
    )

    t.equal(
      filter('# Foo ðŸ«  bar', TableOfContents.new),
      '<h1 id="foo-ðŸ« -bar">Foo ðŸ«  bar</h1>'
    )

    t.equal(
      filter("# foo\n\r\t bar", TableOfContents.new),
      "<h1 id=\"foo-bar\">foo\nbar</h1>"
    )

    t.equal(
      filter("# foo\n# foo\n# foo", TableOfContents.new),
      '\
<h1 id="foo">foo</h1>
<h1 id="foo-1">foo</h1>
<h1 id="foo-2">foo</h1>\
      '
    )
  }

  t.test('TableOfContents.run with a marker and without headers') fn (t) {
    t.equal(filter("::: toc\n:::", TableOfContents.new), '')
  }

  t.test('TableOfContents.run replaces the marker with a table') fn (t) {
    t.equal(
      filter(
        '
::: toc
:::

# Installation
## Linux
### Alpine
### Ubuntu
## Windows
# Manually
        ',
        TableOfContents.new
      ),
      '\
<ul class="toc">
  <li>
    <a href="#installation">Installation</a>
    <ul>
      <li>
        <a href="#linux">Linux</a>
        <ul>
          <li><a href="#alpine">Alpine</a></li>
          <li><a href="#ubuntu">Ubuntu</a></li>
        </ul>
      </li>
      <li><a href="#windows">Windows</a></li>
    </ul>
  </li>
  <li><a href="#manually">Manually</a></li>
</ul>
<h1 id="installation">Installation</h1>
<h2 id="linux">Linux</h2>
<h3 id="alpine">Alpine</h3>
<h3 id="ubuntu">Ubuntu</h3>
<h2 id="windows">Windows</h2>
<h1 id="manually">Manually</h1>\
      '
    )
  }

  t.test('TableOfContents.run with a h2 as the root header') fn (t) {
    t.equal(
      filter(
        '
::: toc
:::

## Foo
### Bar
# Baz
        ',
        TableOfContents.new
      ),
      '\
<ul class="toc">
  <li>
    <a href="#foo">Foo</a>
    <ul>
      <li><a href="#bar">Bar</a></li>
    </ul>
  </li>
  <li><a href="#baz">Baz</a></li>
</ul>
<h2 id="foo">Foo</h2>
<h3 id="bar">Bar</h3>
<h1 id="baz">Baz</h1>\
      '
    )
  }

  t.test('TableOfContents.run with a custom maximum depth') fn (t) {
    let toc = TableOfContents.new

    toc.maximum = 2

    t.equal(
      filter(
        '
::: toc
:::

## Foo
### Bar
# Baz
        ',
        toc
      ),
      '\
<ul class="toc">
  <li><a href="#foo">Foo</a></li>
  <li><a href="#baz">Baz</a></li>
</ul>
<h2 id="foo">Foo</h2>
<h3 id="bar">Bar</h3>
<h1 id="baz">Baz</h1>\
      '
    )
  }

  t.test('TableOfContents.run with a custom class') fn (t) {
    let toc = TableOfContents.new

    toc.class = 'foo'

    t.equal(
      filter(
        '
::: toc
:::

## Foo
        ',
        toc
      ),
      '\
<ul class="foo">
  <li><a href="#foo">Foo</a></li>
</ul>
<h2 id="foo">Foo</h2>\
      '
    )
  }
}
