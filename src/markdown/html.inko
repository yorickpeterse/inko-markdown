# HTML generation and processing.
import builder.html
import markdown (Document, Node)
import std.string (StringBuffer)

let TAB = 9
let LF = 10
let CR = 13
let SPACE = 32
let HYPHEN = 45
let DOT = 46

# A table that maps bytes (based on their index) to a boolean that states if the
# byte can be included in URLs (and thus heading IDs). This table is modified to
# also allow/keep emoticons as-is. Bytes are used as an index, and if the value
# is `true`, it's safe to include the byte.
let URL_SAFE = [
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  true, false, false, true, false, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, false, true, false, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, false, false, false, false,
  true, false, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, false, false, false, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true,
]

# The characters to use for percent encoding special bytes.
let PERCENT_CHARS = '0123456789ABCDEF'

fn percent_encode(byte: Int, into: mut ByteArray) {
  into.push(37)
  into.push(PERCENT_CHARS.byte(byte / 16 % 16))
  into.push(PERCENT_CHARS.byte(byte % 16))
}

fn percent_encode_normal(byte: Int, into: mut ByteArray) {
  let chars = '0123456789ABCDEF'
  let mut val = byte
  let tmp = ByteArray.new

  while val > 0 {
    tmp.push(chars.byte(val % 16))
    val /= 16
  }

  tmp.push(37)
  tmp.reverse
  into.copy_from(tmp, at: 0, size: tmp.size)
}

# Generates an HTML document from a markup document.
#
# # Examples
#
#     import markdown.html (Generator)
#     import markdown.parser (Parser)
#
#     let doc = Parser.new('*hello*').parse.expect('the markup is invalid')
#
#     Generator.new(doc).generate.to_string # => "<p><strong>hello</strong></p>"
class pub Generator {
  let @document: ref Document
  let @footnotes: Map[String, Int]

  # If footnotes should be included in the generated document.
  #
  # This option defaults to `true`.
  let pub @enable_footnotes: Bool

  # Returns a new generator that will convert the given document to HTML.
  fn pub static new(document: ref Document) -> Generator {
    let footnotes = document.footnotes.iter.reduce(Map.new, fn (map, entry) {
      map.set(entry.key, map.size + 1)
      map
    })

    Generator(document: document, footnotes: footnotes, enable_footnotes: true)
  }

  # Generates the HTML document.
  fn pub move generate -> html.Document {
    let doc = html.Document.fragment

    visit(@document.children, doc)

    if @footnotes.size > 0 and @enable_footnotes { add_footnotes(doc) }

    doc
  }

  fn visit[P: mut + html.Builder](nodes: ref Array[Node], parent: mut P) {
    nodes.iter.each(fn (n) { visit_node(n, parent) })
  }

  fn visit_node[P: mut + html.Builder](node: ref Node, parent: mut P) {
    match node {
      case Emphasis(nodes) -> {
        parent.em.with(fn (el) { visit(nodes, el) })
        nil
      }
      case Paragraph(nodes) -> parent.p.with(fn (el) { visit(nodes, el) })
      case Strong(nodes) -> parent.strong.with(fn (el) { visit(nodes, el) })
      case CodeSpan(code) -> parent.code.text(code)
      case CodeBlock(Some(lang), body) -> {
        parent.pre.with(fn (pre) {
          pre.code.with(fn (c) { c.attr('data-language', lang).text(body) })
        })
      }
      case CodeBlock(None, body) -> {
        parent.pre.with(fn (pre) {
          pre.code.with(fn (code) { code.text(body) })
        })
      }
      case Text(text) -> parent.text(text)
      case AutoLink(url) -> {
        parent.a.attr('href', url).with(fn (el) { el.text(url) })
      }
      case Link(Direct(url), nodes) -> {
        parent.a.attr('href', url).with(fn (el) { visit(nodes, el) })
      }
      case Link(Reference(name), nodes) -> {
        match @document.references.opt(name) {
          case Some(url) -> {
            parent.a.attr('href', url).with(fn (a) { visit(nodes, a) })
          }
          case _ -> parent.a.with(fn (a) { visit(nodes, a) })
        }
      }
      case Image(Direct(url), alt) -> {
        parent.img.attr('src', url).attr('alt', alt)
      }
      case Image(Reference(name), alt) -> {
        match @document.references.opt(name) {
          case Some(url) -> parent.img.attr('src', url).attr('alt', alt)
          case _ -> parent.img.attr('alt', alt)
        }
      }
      case Footnote(name) -> {
        if @enable_footnotes {
          match @footnotes.opt(name) {
            case Some(id) -> {
              parent
                .a
                .attr('href', '#footnote-${id}')
                .attr('class', 'footnote')
                .with(fn (a) { a.sup.text(id.to_string) })

              nil
            }
            case _ -> {}
          }
        }
      }
      case UnorderedList(items) -> parent.ul.with(fn (el) { visit(items, el) })
      case OrderedList(items) -> parent.ol.with(fn (el) { visit(items, el) })
      case ListItem(nodes) -> parent.li.with(fn (el) { visit(nodes, el) })
      case Quote(nodes) -> parent.blockquote.with(fn (el) { visit(nodes, el) })
      case Heading(1, nodes) -> parent.h1.with(fn (el) { visit(nodes, el) })
      case Heading(2, nodes) -> parent.h2.with(fn (el) { visit(nodes, el) })
      case Heading(3, nodes) -> parent.h3.with(fn (el) { visit(nodes, el) })
      case Heading(4, nodes) -> parent.h4.with(fn (el) { visit(nodes, el) })
      case Heading(5, nodes) -> parent.h5.with(fn (el) { visit(nodes, el) })
      case Heading(_, nodes) -> parent.h6.with(fn (el) { visit(nodes, el) })
      case Superscript(nodes) -> parent.sup.with(fn (el) { visit(nodes, el) })
      case Subscript(nodes) -> parent.sub.with(fn (el) { visit(nodes, el) })
      case Block(tag, nodes) -> {
        parent.div.with(fn (el) {
          if tag.size > 0 { el.attr('class', tag) }

          visit(nodes, el)
        })
      }
      case Span(tag, nodes) -> {
        parent.span.with(fn (el) {
          if tag.size > 0 { el.attr('class', tag) }

          visit(nodes, el)
        })
      }
      case ThematicBreak -> parent.hr
      case LineBreak -> parent.br
      case Table(head, body, foot) -> {
        parent.table.with(fn (table) {
          if head.size > 0 {
            table.thead.with(fn (thead) {
              head.iter.each(fn (row) {
                thead.tr.with(fn (tr) {
                  row.iter.each(fn (col) {
                    tr.th.with(fn (th) { visit(col, th) })
                  })
                })
              })
            })
          }

          if body.size > 0 {
            table.tbody.with(fn (tbody) {
              body.iter.each(fn (row) {
                tbody.tr.with(fn (tr) {
                  row.iter.each(fn (col) {
                    tr.td.with(fn (th) { visit(col, th) })
                  })
                })
              })
            })
          }

          if foot.size > 0 {
            table.tfoot.with(fn (tfoot) {
              foot.iter.each(fn (row) {
                tfoot.tr.with(fn (tr) {
                  row.iter.each(fn (col) {
                    tr.td.with(fn (th) { visit(col, th) })
                  })
                })
              })
            })
          }
        })
      }
      case Comment(_) -> {}
    }
  }

  fn heading(element: mut html.Element, nodes: ref Array[Node]) {
    visit(nodes, element)
  }

  fn add_footnotes(document: mut html.Document) {
    document.div.attr('class', 'footnotes').with(fn (div) {
      div.ol.with(fn (ol) {
        @footnotes.iter.each(fn (entry) {
          ol.li.attr('id', 'footnote-${entry.value}').with(fn (li) {
            visit(@document.footnotes.get(entry.key), li)
          })
        })
      })
    })
  }
}

# A type used to transform an HTML document.
trait pub Filter {
  # Transforms the HTML document.
  #
  # How or what exactly this method does is up to the type that implements this
  # trait. Examples include adding IDs to headings, generating a table of
  # contents, or replacing one element with another.
  fn pub mut run(document: mut html.Document)
}

class Heading {
  let @nodes: Array[Heading]
  let @parent: Option[mut Heading]
  let @level: Int
  let @id: String
  let @text: String

  fn mut add(heading: Heading) {
    heading.parent = Option.Some(self)
    @nodes.push(heading)
  }
}

class HeadingTree {
  let @roots: Array[Heading]
  let @current: Option[mut Heading]

  fn mut add(level: Int, id: String, text: String) {
    let heading = Heading(
      level: level,
      id: id,
      text: text,
      nodes: [],
      parent: Option.None,
    )

    match @current {
      case Some(val) if level == val.level -> {
        match val.parent {
          case Some(parent) -> parent.add(heading)
          case _ -> add_root(heading)
        }
      }
      case Some(val) if level > val.level -> {
        @current = Option.Some(mut heading)
        val.add(heading)
      }
      case Some(val) if level < val.level -> {
        let mut target = val.parent

        loop {
          match target {
            case Some(t) if level <= t.level -> target = t.parent
            case _ -> break
          }
        }

        match target {
          case Some(t) -> {
            @current = Option.Some(mut heading)
            t.add(heading)
          }
          case _ -> add_root(heading)
        }
      }
      case _ -> add_root(heading)
    }
  }

  fn mut add_root(heading: Heading) {
    @current = Option.Some(mut heading)
    @roots.push(heading)
  }

  fn to_html -> html.Element {
    let root = html.Element.new('ul')

    root.with(fn (ul) { @roots.iter.each(fn (h) { visit(h, ul) }) })
    root
  }

  fn visit(heading: ref Heading, element: mut html.Element) {
    let li = element.li

    li.a.attr('href', '#${heading.id}').text(heading.text)

    if heading.nodes.empty? { return }

    li.ul.with(fn (ul) { heading.nodes.iter.each(fn (h) { visit(h, ul) }) })
  }
}

# A filter that adds IDs to headings, and optionally adds a table of contents.
class pub TableOfContents {
  let @ids: Map[String, Int]
  let @tree: HeadingTree

  # The maximum heading level to include.
  #
  # For example, if this value is set to `3`, then `h4`, `h5` and `h6` elements
  # are excluded from the table of contents.
  let pub @maximum: Int

  # The class to apply to the table of contents container.
  let pub @class: String

  # The class used to mark headings such that they're not included in the table
  # of contents.
  let pub @ignore_class: String

  fn pub static new -> TableOfContents {
    TableOfContents(
      ids: Map.new,
      tree: HeadingTree(current: Option.None, roots: []),
      maximum: 6,
      class: 'toc',
      ignore_class: 'toc-ignore',
    )
  }

  fn mut track_headings(document: mut html.Document) {
    document.nodes.iter_mut.each(fn (node) { heading(node) })
  }

  fn mut heading(node: mut html.Node) {
    match node {
      case
        Element(el)
      if el.name.size == 2
        and el.name.byte(0) == 104
        and el.name.byte(1) >= 49
        and el.name.byte(1) <= 54
      -> {
        match text_and_id(el) {
          case (id, text) -> {
            let level = el.name.byte(1) - 48

            el.attr('id', id)

            if level <= @maximum and ignore?(el).false? {
              @tree.add(level, id, text)
            }
          }
        }
      }
      case Element(el) -> el.nodes.iter_mut.each(fn (n) { heading(n) })
      case Text(_) -> {}
    }
  }

  fn mut ignore?(heading: mut html.Element) -> Bool {
    match heading.nodes.opt(0) {
      case Some(Element({ @name = 'span', @attributes = attr })) -> {
        match attr.opt('class') {
          case Some(v) if v == @ignore_class -> {}
          case _ -> return false
        }
      }
      case _ -> return false
    }

    # We remove the span so it doesn't "leak" into the final document, as it
    # doesn't have a meaningful purpose there.
    match heading.nodes.remove_at(0) {
      case Element({ @nodes = nodes }) -> heading.nodes = nodes
      case _ -> {}
    }

    true
  }

  fn mut text_and_id(element: ref html.Element) -> (String, String) {
    let stack = element.nodes.reverse_iter.to_array
    let id = ByteArray.new
    let text = StringBuffer.new

    loop {
      match stack.pop {
        case Some(Element(el)) -> {
          el.nodes.reverse_iter.each(fn (node) { stack.push(node) })
        }
        case Some(Text(val)) -> {
          text.push(val)

          let iter = val.bytes.peekable

          loop {
            match iter.next {
              # If the byte is in the ASCII range A-Z, lowercase it; otherwise
              # we keep it as-is.
              case Some(v) if v >= 65 and v <= 90 -> id.push(v + 32)
              case Some(v) if URL_SAFE.get(v) -> id.push(v)
              case Some(TAB or LF or CR or SPACE) -> {
                if id.last.or(-1) != HYPHEN { id.push(HYPHEN) }

                loop {
                  match iter.peek {
                    case Some(TAB or LF or CR or SPACE) -> iter.next
                    case _ -> break
                  }
                }
              }
              case Some(v) -> percent_encode(v, into: id)
              case _ -> break
            }
          }
        }
        case _ -> break
      }
    }

    (add_id(id.into_string), text.into_string)
  }

  fn mut add_id(id: String) -> String {
    match @ids.opt(id) {
      case Some(num) -> {
        @ids.set(id, num + 1)
        '${id}-${num + 1}'
      }
      case _ -> {
        @ids.set(id, 0)
        id
      }
    }
  }

  fn mut replace_markers(document: mut html.Document) {
    let indexes = []

    # We collect the indexes first, _then_ replace their elements. This is
    # needed because in this loop we retain a reference to the element, and
    # `Array.set` drops that element, resulting in a drop error. Moving this to
    # a separate loop lets us work around that.
    document.nodes.iter_mut.each_with_index(fn (idx, node) {
      match node {
        case Element({ @name = 'div', @attributes = attr }) -> {
          match attr.opt('class') {
            case Some('toc') -> indexes.push(idx)
            case _ -> {}
          }
        }
        case _ -> {}
      }
    })

    if @tree.roots.size > 0 {
      indexes.into_iter.each(fn (idx) {
        let toc = @tree.to_html

        toc.attr('class', @class)
        document.nodes.set(idx, html.Node.Element(toc))
      })
    } else {
      indexes.reverse_iter.each(fn (idx) { document.nodes.remove_at(idx) })
    }
  }
}

impl Filter for TableOfContents {
  fn pub mut run(document: mut html.Document) {
    track_headings(document)
    replace_markers(document)
  }
}
