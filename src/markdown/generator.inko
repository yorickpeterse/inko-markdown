# Generating of HTML and other formats.
import builder.html
import markdown.parser.(Document, Node)

# Generates an HTML document from a markup document.
#
# # Examples
#
#     import markdown.generator.Html
#     import markdown.parser.Parser
#
#     let doc = Parser.new('*hello*').parse.expect('the markup is invalid')
#
#     Html.new(doc).generate.to_string # => "<p><strong>hello</strong></p>"
class pub Html {
  let @document: ref Document
  let @footnotes: Map[String, Int]

  # If footnotes should be included in the generated document.
  #
  # This option defaults to `true`.
  let pub @enable_footnotes: Bool

  # Returns a new generator that will convert the given document to HTML.
  fn pub static new(document: ref Document) -> Html {
    let footnotes = document.footnotes.iter.reduce(Map.new) fn (map, entry) {
      map.set(entry.key, map.size + 1)
      map
    }

    Html {
      @document = document,
      @footnotes = footnotes,
      @enable_footnotes = true,
    }
  }

  # Generates the HTML document.
  fn pub move generate -> html.Document {
    let doc = html.Document.new

    doc.fragment = true
    visit(@document.children, doc)

    if @footnotes.size > 0 and @enable_footnotes { add_footnotes(doc) }

    doc
  }

  fn visit[P: html.Builder + mut](nodes: ref Array[Node], parent: mut P) {
    nodes.iter.each fn (n) { visit_node(n, parent) }
  }

  fn visit_node[P: html.Builder + mut](node: ref Node, parent: mut P) {
    match node {
      case Emphasis(nodes) -> {
        parent.em.then fn (el) { visit(nodes, el) }
        nil
      }
      case Paragraph(nodes) -> parent.p.then fn (el) { visit(nodes, el) }
      case Strong(nodes) -> parent.strong.then fn (el) { visit(nodes, el) }
      case CodeSpan(code) -> parent.code.text(code)
      case CodeBlock(Some(lang), body) -> parent.pre.then fn (pre) {
        pre.code.then fn (c) { c.attr('data-language', lang).text(body) }
      }
      case CodeBlock(None, body) -> {
        parent.pre.then fn (pre) { pre.code.then fn (code) { code.text(body) } }
      }
      case Text(text) -> parent.add_child(html.Node.Text(text))
      case Link(Direct(url), nodes) -> parent.a.attr('href', url).then fn (el) {
        if nodes.empty? { el.text(url) } else { visit(nodes, el) }
      }
      case Link(Reference(name), nodes) -> match @document.references.opt(name) {
        case Some(url) -> {
          parent.a.attr('href', url).then fn (a) { visit(nodes, a) }
        }
        case _ -> parent.a.then fn (a) { visit(nodes, a) }
      }
      case Image(Direct(url), alt) -> {
        parent.img.attr('src', url).attr('alt', alt)
      }
      case Image(Reference(name), alt) -> match @document.references.opt(name) {
        case Some(url) -> parent.img.attr('src', url).attr('alt', alt)
        case _ -> parent.img.attr('alt', alt)
      }
      case Footnote(name) -> if @enable_footnotes {
        match @footnotes.opt(name) {
          case Some(id) -> {
            parent
            .a
            .attr('href', "#footnote-{id}")
            .attr('class', 'footnote')
            .then fn (a) { a.sup.text(id.to_string) }

            nil
          }
          case _ -> {}
        }
      }
      case UnorderedList(items) -> parent.ul.then fn (el) { visit(items, el) }
      case OrderedList(items) -> parent.ol.then fn (el) { visit(items, el) }
      case ListItem(nodes) -> parent.li.then fn (el) { visit(nodes, el) }
      case Quote(nodes) -> {
        parent.blockquote.then fn (el) { visit(nodes, el) }
      }
      case Heading(1, nodes) -> parent.h1.then fn (el) { visit(nodes, el) }
      case Heading(2, nodes) -> parent.h2.then fn (el) { visit(nodes, el) }
      case Heading(3, nodes) -> parent.h3.then fn (el) { visit(nodes, el) }
      case Heading(4, nodes) -> parent.h4.then fn (el) { visit(nodes, el) }
      case Heading(5, nodes) -> parent.h5.then fn (el) { visit(nodes, el) }
      case Heading(_, nodes) -> parent.h6.then fn (el) { visit(nodes, el) }
      case Superscript(nodes) -> parent.sup.then fn (el) { visit(nodes, el) }
      case Subscript(nodes) -> parent.sub.then fn (el) { visit(nodes, el) }
      case Block(tag, nodes) -> parent.div.then fn (el) {
        if tag.size > 0 { el.attr('class', tag) }

        visit(nodes, el)
      }
      case ThematicBreak -> parent.hr
      case LineBreak -> parent.br
      case Table(head, body, foot) -> parent.table.then fn (table) {
        if head.size > 0 {
          table.thead.then fn (thead) {
            head.iter.each fn (row) {
              thead.tr.then fn (tr) {
                row.iter.each fn (col) {
                  tr.th.then fn (th) { visit(col, th) }
                }
              }
            }
          }
        }

        if body.size > 0 {
          table.tbody.then fn (tbody) {
            body.iter.each fn (row) {
              tbody.tr.then fn (tr) {
                row.iter.each fn (col) {
                  tr.td.then fn (th) { visit(col, th) }
                }
              }
            }
          }
        }

        if foot.size > 0 {
          table.tfoot.then fn (tfoot) {
            foot.iter.each fn (row) {
              tfoot.tr.then fn (tr) {
                row.iter.each fn (col) {
                  tr.td.then fn (th) { visit(col, th) }
                }
              }
            }
          }
        }
      }
    }
  }

  fn heading(element: mut html.Element, children: ref Array[Node]) {
    visit(children, element)
  }

  fn add_footnotes(document: mut html.Document) {
    document.div.attr('class', 'footnotes').then fn (div) {
      div.ol.then fn (ol) {
        @footnotes.iter.each fn (entry) {
          ol.li.attr('id', "footnote-{entry.value}").then fn (li) {
            visit(@document.footnotes.get(entry.key), li)
          }
        }
      }
    }
  }
}
